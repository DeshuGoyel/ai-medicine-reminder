{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { lightTheme, darkTheme } from \"../constants/theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ThemeContext = createContext();\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDarkMode = _useState2[0],\n    setIsDarkMode = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isSystemTheme = _useState4[0],\n    setIsSystemTheme = _useState4[1];\n  useEffect(function () {\n    loadThemePreference();\n  }, []);\n  var loadThemePreference = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var savedTheme = yield AsyncStorage.getItem('themePreference');\n        if (savedTheme) {\n          var _JSON$parse = JSON.parse(savedTheme),\n            isDark = _JSON$parse.isDark,\n            isSystem = _JSON$parse.isSystem;\n          setIsDarkMode(isDark);\n          setIsSystemTheme(isSystem);\n        } else {\n          var hour = new Date().getHours();\n          setIsDarkMode(hour >= 18 || hour < 6);\n        }\n      } catch (error) {\n        console.error('Error loading theme preference:', error);\n        setIsDarkMode(false);\n      }\n    });\n    return function loadThemePreference() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var toggleTheme = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var newIsDarkMode = !isDarkMode;\n        setIsDarkMode(newIsDarkMode);\n        setIsSystemTheme(false);\n        yield AsyncStorage.setItem('themePreference', JSON.stringify({\n          isDark: newIsDarkMode,\n          isSystem: false\n        }));\n      } catch (error) {\n        console.error('Error saving theme preference:', error);\n      }\n    });\n    return function toggleTheme() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var theme = isDarkMode ? darkTheme : lightTheme;\n  return _jsx(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkMode: isDarkMode,\n      toggleTheme: toggleTheme,\n      isSystemTheme: isSystemTheme\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","AsyncStorage","lightTheme","darkTheme","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","_useState","_useState2","_slicedToArray","isDarkMode","setIsDarkMode","_useState3","_useState4","isSystemTheme","setIsSystemTheme","loadThemePreference","_ref2","_asyncToGenerator","savedTheme","getItem","_JSON$parse","JSON","parse","isDark","isSystem","hour","Date","getHours","error","console","apply","arguments","toggleTheme","_ref3","newIsDarkMode","setItem","stringify","theme","Provider","value"],"sources":["/project/sandbox/user-workspace/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { lightTheme, darkTheme } from '../constants/theme';\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isSystemTheme, setIsSystemTheme] = useState(true);\n\n  useEffect(() => {\n    loadThemePreference();\n  }, []);\n\n  const loadThemePreference = async () => {\n    try {\n      const savedTheme = await AsyncStorage.getItem('themePreference');\n      if (savedTheme) {\n        const { isDark, isSystem } = JSON.parse(savedTheme);\n        setIsDarkMode(isDark);\n        setIsSystemTheme(isSystem);\n      } else {\n        // Default to system theme and check time of day\n        const hour = new Date().getHours();\n        setIsDarkMode(hour >= 18 || hour < 6);\n      }\n    } catch (error) {\n      console.error('Error loading theme preference:', error);\n      // Default to light theme on error\n      setIsDarkMode(false);\n    }\n  };\n\n  const toggleTheme = async () => {\n    try {\n      const newIsDarkMode = !isDarkMode;\n      setIsDarkMode(newIsDarkMode);\n      setIsSystemTheme(false);\n      await AsyncStorage.setItem(\n        'themePreference',\n        JSON.stringify({ isDark: newIsDarkMode, isSystem: false })\n      );\n    } catch (error) {\n      console.error('Error saving theme preference:', error);\n    }\n  };\n\n  const theme = isDarkMode ? darkTheme : lightTheme;\n\n  return (\n    <ThemeContext.Provider value={{ \n      theme, \n      isDarkMode, \n      toggleTheme, \n      isSystemTheme \n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,UAAU,EAAEC,SAAS;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAE3D,OAAO,IAAMC,YAAY,GAAGR,aAAa,CAAC,CAAC;AAE3C,OAAO,IAAMS,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACtC,IAAAC,SAAA,GAAoCX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,UAAA,GAA0ChB,QAAQ,CAAC,IAAI,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EAEtChB,SAAS,CAAC,YAAM;IACdmB,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMA,mBAAmB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MACtC,IAAI;QACF,IAAMC,UAAU,SAASrB,YAAY,CAACsB,OAAO,CAAC,iBAAiB,CAAC;QAChE,IAAID,UAAU,EAAE;UACd,IAAAE,WAAA,GAA6BC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;YAA3CK,MAAM,GAAAH,WAAA,CAANG,MAAM;YAAEC,QAAQ,GAAAJ,WAAA,CAARI,QAAQ;UACxBd,aAAa,CAACa,MAAM,CAAC;UACrBT,gBAAgB,CAACU,QAAQ,CAAC;QAC5B,CAAC,MAAM;UAEL,IAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;UAClCjB,aAAa,CAACe,IAAI,IAAI,EAAE,IAAIA,IAAI,GAAG,CAAC,CAAC;QACvC;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QAEvDlB,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAAA,gBAjBKK,mBAAmBA,CAAA;MAAA,OAAAC,KAAA,CAAAc,KAAA,OAAAC,SAAA;IAAA;EAAA,GAiBxB;EAED,IAAMC,WAAW;IAAA,IAAAC,KAAA,GAAAhB,iBAAA,CAAG,aAAY;MAC9B,IAAI;QACF,IAAMiB,aAAa,GAAG,CAACzB,UAAU;QACjCC,aAAa,CAACwB,aAAa,CAAC;QAC5BpB,gBAAgB,CAAC,KAAK,CAAC;QACvB,MAAMjB,YAAY,CAACsC,OAAO,CACxB,iBAAiB,EACjBd,IAAI,CAACe,SAAS,CAAC;UAAEb,MAAM,EAAEW,aAAa;UAAEV,QAAQ,EAAE;QAAM,CAAC,CAC3D,CAAC;MACH,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAAA,gBAZKI,WAAWA,CAAA;MAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GAYhB;EAED,IAAMM,KAAK,GAAG5B,UAAU,GAAGV,SAAS,GAAGD,UAAU;EAEjD,OACEG,IAAA,CAACC,YAAY,CAACoC,QAAQ;IAACC,KAAK,EAAE;MAC5BF,KAAK,EAALA,KAAK;MACL5B,UAAU,EAAVA,UAAU;MACVuB,WAAW,EAAXA,WAAW;MACXnB,aAAa,EAAbA;IACF,CAAE;IAAAR,QAAA,EACCA;EAAQ,CACY,CAAC;AAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}